<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label19.Text" xml:space="preserve">
    <value>long, slender blades designed for elegant movements. Longsword users have a gauge that fills up with repeated attacks on monster. Once the gauge is full, all attacks become more powerful. The Spirit Combo attacks are also unlocked, and all attacks become less likely to bounce.</value>
  </data>
  <data name="label17.Text" xml:space="preserve">
    <value>are large, slow weapons that were first introduced in Monster Hunter. Originally they had three main attacks: the sideswipe, the upswing, and the downstrike. Hitting a monster with the middle of the blade, as opposed to the tip, or hilt, causes a damage bonus. Greatswords have a charge attack, first introduced in Monster Hunter 2. There are three levels of charge, and the Level 3 charge is one of the most damaging single attacks in any game.
</value>
  </data>
  <data name="label21.Text" xml:space="preserve">
    <value>These weapons are small and accompanied by a shield that allows the Hunter to block most attacks. Although they deal relatively low damage in one strike, they are very quick, and it is possible to perform fairly long combos. In Monster Hunter 2, it became possible to use items while the Sword and Shield is drawn.
</value>
  </data>
  <data name="label23.Text" xml:space="preserve">
    <value>are similar to Sword and Shields but with a stronger focus on offense (at the expense of defense). Like Sword and Shields, individual Dual Blade attacks cause a small amount of damage, but they are fast and flow easily into combos. Dual Blade users can enter Demonization mode by pressing the R button. When Demonization mode is activated, Hunters are able to resist being blown over by monster's wings, attacks can be linked into a never-ending combo and the Demon Dance can be used, a powerful combo that cannot bounce.
</value>
  </data>
  <data name="label25.Text" xml:space="preserve">
    <value>large, heavy weapons which are capable of dealing the vast amounts of damage in a single combo. They, along with the Hunting Horn, exclusively deal Impact-type damage. Their tremendous size only slightly hinders mobility, and Hunters are still able to run with them, unlike with the Great Sword and Lance. 
</value>
  </data>
  <data name="label27.Text" xml:space="preserve">
    <value>are similar to the Hammer in that they do Impact damage and able to K.O a monster when they connect with the head. Generally they are weaker than the Hammer, and do less damage per-hit, even on those attacks which the two appear to share (such as the Superpound). What makes the Hunting Horn different from the Hammer, however, is its Recital Ability, which is triggered by pressing the "R" button.
</value>
  </data>
  <data name="label29.Text" xml:space="preserve">
    <value>long weapons that can strike from a distance. The Lance is always accompanied by a large shield which grants a powerful defense against most attacks. Although slow and difficult to travel with, the weapon's damage output can be considerable.
</value>
  </data>
  <data name="label31.Text" xml:space="preserve">
    <value>long, piercing weapons with a mechanism inside which can fire an explosive round. Unlike Bowguns, the Gunlance cannot fire over distances; the Shelling ability can only be used from close range and reduces the weapon's sharpness with every use.
</value>
  </data>
  <data name="label33.Text" xml:space="preserve">
    <value>There are two modes: Axe and Sword. It is possible to transform between the two near-instantly. While the weapon is drawn, the running speed in Axe-mode is similar to that of a Long Sword; however, Sword-mode's running speed is similar to the Great Sword.
</value>
  </data>
  <data name="label35.Text" xml:space="preserve">
    <value>This double-ended rod is capable of quick, fluid attacks (like the Long Sword) and allows the hunter to jump at any time in a pole-vaulting fashion. It also is capable of summoning a Kinsect and using it to attack monsters. After locking on to a target using the projectiles that the rod can shoot, the user can freely send their Kinsect to attack the target and drain energy from it, then call it back after in order to boost the Hunter (in terms of attack, health, speed or defense).
</value>
  </data>
  <data name="label37.Text" xml:space="preserve">
    <value>It is similar to the Switch Axe with its ability to switch between two different weapon modes. While in Sword Mode, hunters will be able to perform fast combo attacks with a sword and guard with a shield, making it very similar to the Sword and Shield class.</value>
  </data>
  <data name="label39.Text" xml:space="preserve">
    <value>are ranged weapons. As the name suggests, they are light enough to allow Hunters to run with the weapon drawn, and they can be sheathed and unsheathed very quickly. However, Light Bowguns are generally low in attack power, although this is partially compensated by different Light Bowguns being able to Rapid-Fire a specific Ammo.
</value>
  </data>
  <data name="label41.Text" xml:space="preserve">
    <value>are ranged weapons that deal considerable damage, but due to their size and weight, do not allow Hunters to run when drawn. Heavy Bowguns are able to use a wide range of Ammo. Since Monster Hunter 2, Hunters are able to equip Heavy Bowguns with a Shield, for blocking monster attacks. Equipping a Power Barrel will obviously increase attack power.
</value>
  </data>
  <data name="label43.Text" xml:space="preserve">
    <value>a fast, unique ranged weapon. An infinite quiver of arrows is automatically provided, although each individual doesn't do a great deal of damage. Bows can fire three different kinds of Shot: Scatter, where the arrows spread horizontally outwards, Pierce, where one arrow travels in a straight line through a monster, hitting multiple times, and Rapid, where several arrows are fired and spread out vertically.
</value>
  </data>
</root>